/*
    UITicTacToeBoardMain.cpp
    

*/
//UITicTacToeBoardMain.cpp generated by cbtek on 07-12-2017 at 02:23:37 AM

#include "UITicTacToeBoardMain.h"
#include "ui_UITicTacToeBoardMain.h"

#include <QPainter>

using namespace cbtek::common::utility;

using namespace pf_projects::products::qtutils;

namespace pf_projects {
namespace products {
namespace tic_tac_toe {

const static int c_STARTUP_TIMEOUT_MS = 2;
const static double c_X_POS_PERCENTAGE = 272 / 1024.0;//.2734375;
const static double c_Y_POS_PERCENTAGE = 78 / 768.0; //.09375;
const static double c_WIDTH_AMOUNT = 480;
const static double c_HEIGHT_AMOUNT = 480;
const static double c_WIDTH_PERCENTAGE = 480 / 1024.0;
const static double c_HEIGHT_PERCENTAGE = 480 / 768.0;
const static double c_Y_OFFSET_PERCENTAGE = 128 / 768.0;
const static double c_X_OFFSET_PERCENTAGE = 128 / 1024.0;


UITicTacToeBoardMain::UITicTacToeBoardMain(QWidget *parent) :
    QMainWindow(parent),
    m_ui(new Ui_UITicTacToeBoardMain)
{
    m_ui->setupUi(this);    
    m_boardView = nullptr;
    m_boardController = nullptr;
    m_imgUnderlay.load(":/imgNukaBoyBase.png");
    m_imgOverlay.load(":/imgNukaBoyOverlay.png");
    m_ptrStaticAnimationOverlay = new UIStaticAnimation;
    m_ptrStaticAnimationOverlay->hide();
    connect(m_ptrStaticAnimationOverlay,SIGNAL(rendered(QImage)),this,SLOT(onStaticFrameRendered(QImage)));
    m_ptrStaticAnimationOverlay->start(64,255,60,32,QColor(0,255,0,26));

    this->setMouseTracking(true);
    this->startTimer(30);
    m_currentMode = TicTacToeMode::Startup;
    m_currentState.setEnter();
}

UITicTacToeBoardMain::~UITicTacToeBoardMain()
{
    delete m_ui;
}

void UITicTacToeBoardMain::resizeEvent(QResizeEvent *event)
{
    m_imgBuffer = QImage(width(),height(),QImage::Format_ARGB32);
    m_intContentX = static_cast<int>(c_X_POS_PERCENTAGE * width());
    m_intContentY = static_cast<int>(c_Y_POS_PERCENTAGE * height());
    m_intContentW = (width() / 1024.0) * c_WIDTH_AMOUNT; //static_cast<int>(c_WIDTH_PERCENTAGE * width() - ((c_X_OFFSET_PERCENTAGE * width())/2));
    m_intContentH = (height() / 768.0) * c_HEIGHT_AMOUNT;
    //m_intContentH = //static_cast<int>(c_HEIGHT_PERCENTAGE * height()- ((c_Y_OFFSET_PERCENTAGE * height())/2));

    if (m_boardView)
    {
        m_boardView->updateBoardSize(m_intContentW,m_intContentH);
    }
    this->update();
}

void UITicTacToeBoardMain::paintEvent(QPaintEvent *event)
{
    QPainter g(this);
    g.drawImage(0,0,m_imgBuffer);
}

void UITicTacToeBoardMain::mouseMoveEvent(QMouseEvent *event)
{
    m_intMouseX = event->pos().x() - m_intContentX;
    m_intMouseY = event->pos().y() - m_intContentY;
}

void UITicTacToeBoardMain::mousePressEvent(QMouseEvent *event)
{
    m_intMouseX = event->pos().x() - m_intContentX;
    m_intMouseY = event->pos().y() - m_intContentY;
    m_isMousePress = true;
}

void UITicTacToeBoardMain::timerEvent(QTimerEvent *event)
{
    QPainter painter(&m_imgBuffer);
    QRect screenRect(0,0,m_imgBuffer.width(),m_imgBuffer.height());
    QRect contentRect(m_intContentX, m_intContentY, m_intContentW, m_intContentH);
    painter.fillRect(screenRect, Qt::black);
    painter.drawImage(screenRect, m_imgUnderlay);

    switch(m_currentMode)
    {
        case TicTacToeMode::Startup:updateStartupMode(painter);break;
        case TicTacToeMode::Game:updateGameMode(painter);break;
        case TicTacToeMode::Shutdown:updateShutdownMode(painter);break;
    }
    painter.drawImage(contentRect,m_imgCurrentStaticFrame);
    painter.drawImage(screenRect,m_imgOverlay);
    this->update();
}

void UITicTacToeBoardMain::updateStartupMode(QPainter &painter)
{
    switch(m_currentState.getType())
    {
        case StateType::Enter:
        {
            if (m_imgStartupContent.isNull())
            {
                m_imgStartupContent.load(":/imgNukaBoyLogo.png");
            }
            m_tmStartupTimeOut.restart();
            m_currentState.setNextStateType();
        }
        break;
        case StateType::Update:
        {
            QRect contentRect(m_intContentX, m_intContentY, m_intContentW, m_intContentH);
            painter.drawImage(contentRect,m_imgStartupContent);
            if (m_tmStartupTimeOut.elapsed() > c_STARTUP_TIMEOUT_MS)
            {
                m_currentState.setNextStateType();
            }
        }
        break;
        case StateType::Exit:
        {
            m_currentState.setNextStateType();
            m_currentMode = TicTacToeMode::Game;
        }
        break;
    }
}

void UITicTacToeBoardMain::updateGameMode(QPainter &painter)
{
    switch(m_currentState.getType())
    {
        case StateType::Enter:
        {
            if (!m_boardView)
            {
                m_boardView = new UITicTacToeBoardView;
            }

            if (!m_boardController)
            {
                m_boardController = new UITicTacToeBoardController(m_boardView);
            }

            m_boardController->initialize();
            m_boardView->updateBoardSize(m_intContentW,m_intContentH);
            connect(m_boardView,SIGNAL(repaintRequested()),this,SLOT(onRepaintBoard()));
            m_currentState.setUpdate();
        }
        break;
        case StateType::Update:
        {
            QRect contentRect(m_intContentX, m_intContentY, m_intContentW, m_intContentH);
            m_boardView->drawBoard(contentRect, painter);
            if (m_intMouseX >= 0 && m_intMouseY >= 0)
            {
                this->setWindowTitle("Virtual Pos: "+QString::number(m_intMouseX)+", "+QString::number(m_intMouseY));
                m_boardView->updateBoardMousePosition(m_intMouseX,m_intMouseY);
                if (m_isMousePress)
                {
                    m_boardView->updateBoardMouseClick(m_intMouseX,m_intMouseY);
                    m_isMousePress = false;
                }
            }
        }
        break;
        case StateType::Exit:
        {

        }
        break;
    }
}

void UITicTacToeBoardMain::updateShutdownMode(QPainter &painter)
{
    switch(m_currentState.getType())
    {
        case StateType::Enter:
        {

        }
        break;
        case StateType::Update:
        {

        }
        break;
        case StateType::Exit:
        {

        }
        break;
    }
}

void UITicTacToeBoardMain::onStaticFrameRendered(QImage frame)
{
    m_imgCurrentStaticFrame = frame;
}

void UITicTacToeBoardMain::onRepaintBoard()
{
    this->update();
}

}}}//end namespace

