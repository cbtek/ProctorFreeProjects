/*
    UIStaticAnimation.cpp
*/
//----------------------------------------
//UIStaticAnimation.cpp generated by cbtek on 07-16-2017 at 01:13:08 AM
//----------------------------------------
#include "UIStaticAnimation.h"

namespace pf_projects {
namespace products {
namespace qt_widget_animation_library {


UIStaticAnimation::UIStaticAnimation(QWidget *parent) : QWidget(parent)
{    
}

void UIStaticAnimation::start(int minGrayscale,
                              int maxGrayscale,
                              int timeout,
                              int size,
                              const QColor &hue)

{
    m_intTimeout = timeout;
    m_intSize = size;
    m_intMinGrayscale = minGrayscale;
    m_intMaxGrayscale = maxGrayscale;
    m_qColorHue = hue;
    onInitialize();
    startTimer(m_intTimeout);
}

UIStaticAnimation::~UIStaticAnimation()
{

}

void UIStaticAnimation::resizeEvent(QResizeEvent *event)
{
    //m_imgBackBuffer = QImage(width(),height(),QImage::Format_RGB32);
}


void UIStaticAnimation::timerEvent(QTimerEvent *event)
{
    QPainter g(&m_imgBackBuffer);
    m_imgBackBuffer.fill(Qt::transparent);
    for (size_t x = 0; x < m_intSize;++x)
    {
        for (size_t y = 0; y < m_intSize; ++y)
        {
            int grayscaleValue = m_rndRandom.next(m_intMinGrayscale,m_intMaxGrayscale);
            int randomAlpha = m_rndRandom.next(0,32);
            QColor grayscaleTone(grayscaleValue,grayscaleValue,grayscaleValue,randomAlpha);
            g.fillRect(x,y,1,1,grayscaleTone);
        }
    }
    g.fillRect(0,0,width(),height(),m_qColorHue);
    emit rendered(m_imgBackBuffer);
    this->update();
}

void UIStaticAnimation::paintEvent(QPaintEvent *event)
{
    QPainter g(this);
    g.drawImage(QRect(0,0,width(),height()),m_imgBackBuffer);
}

void UIStaticAnimation::onInitialize()
{
    m_imgBackBuffer = QImage(m_intSize,m_intSize,QImage::Format_ARGB32);
}




}}}//end namespace


